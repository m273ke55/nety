import { useState, useEffect } from "react";
import AvatarUploader from "../components/AvatarUploader";
import api from "../api/api";

export default function ProfileEdit() {
  const [bio, setBio] = useState("");
  const [interests, setInterests] = useState([]);
  const [avatarPath, setAvatarPath] = useState("");
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");

  const availableInterests = [
    "–°–ø–æ—Ä—Ç", "–ú—É–∑—ã–∫–∞", "–ö–∏–Ω–æ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–Ω–∏–≥–∏", 
    "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–¢–∞–Ω—Ü—ã"
  ];

  useEffect(() => {
    const loadProfile = async () => {
      try {
        const profile = await api.get("/api/profiles/me");
        
        if (profile) {
          setBio(profile.bio || "");
          setAvatarPath(profile.avatar_path || "");
          
          const interestNames = profile.interests 
            ? profile.interests.map(i => i.name || i) 
            : [];
          setInterests(interestNames);
        }
      } catch (err) {
        console.error("Failed to load profile:", err);
      }
    };

    loadProfile();
  }, []);

  const toggleInterest = (interest) => {
    setInterests((prev) =>
      prev.includes(interest) 
        ? prev.filter((i) => i !== interest) 
        : [...prev, interest]
    );
  };

  const saveProfile = async () => {
    setLoading(true);
    setMessage("");
    
    try {
      await api.post("/api/profiles/me", { 
        bio, 
        interests 
      });
      setMessage("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üéâ");
    } catch (err) {
      console.error("Failed to save profile:", err);
      setMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è üòî");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen gradient-bg">
      <div className="nav-container">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold text-gradient">üíï –ù–µ–ê–¥–∏–Ω–æ–∫–∏–π –í–æ–ª–∫ üê∫‚õìüñ§</h1>
            <nav className="flex">
              <a href="/profile/edit" className="nav-link active">–ü—Ä–æ—Ñ–∏–ª—å</a>
              <a href="/feed" className="nav-link">–õ–µ–Ω—Ç–∞</a>
            </nav>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-2xl mx-auto">
          <div className="form-container slide-up">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gradient mb-2">
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
              </h2>
              <p className="text-gray-600">
                –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π
              </p>
            </div>

            <div className="space-y-6">
              <div className="text-center">
                <AvatarUploader onUpload={setAvatarPath} currentAvatar={avatarPath} />
              </div>

              <div>
                <label className="form-label">
                  –û —Å–µ–±–µ
                </label>
                <textarea
                  className="form-textarea"
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö –∏ —Ç–æ–º, —á—Ç–æ –∏—â–µ—Ç–µ..."
                  value={bio}
                  onChange={(e) => setBio(e.target.value)}
                  rows="4"
                />
              </div>

              <div>
                <label className="form-label mb-4">
                  –ò–Ω—Ç–µ—Ä–µ—Å—ã (–≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5)
                </label>
                <div className="grid grid-cols-2 gap-3">
                  {availableInterests.map((interest) => (
                    <label 
                      key={interest} 
                      className={`interest-checkbox ${
                        interests.includes(interest) ? 'checked' : ''
                      } ${interests.length >= 5 && !interests.includes(interest) ? 'opacity-50 cursor-not-allowed' : ''}`}
                    >
                      <input
                        type="checkbox"
                        checked={interests.includes(interest)}
                        onChange={() => {
                          if (interests.length < 5 || interests.includes(interest)) {
                            toggleInterest(interest);
                          }
                        }}
                        disabled={interests.length >= 5 && !interests.includes(interest)}
                      />
                      <span>{interest}</span>
                    </label>
                  ))}
                </div>
                <div className="text-sm text-gray-500 mt-2">
                  –í—ã–±—Ä–∞–Ω–æ: {interests.length}/5
                </div>
              </div>

              {message && (
                <div className={`p-4 rounded-12 text-center font-medium ${
                  message.includes('—É—Å–ø–µ—à–Ω–æ') 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-red-100 text-red-800'
                }`}>
                  {message}
                </div>
              )}

              <button 
                onClick={saveProfile} 
                disabled={loading}
                className="btn-primary w-full text-lg py-4 flex items-center justify-center gap-2"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <span>üíæ</span>
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}